import { ethers } from 'ethers';
import { NextApiRequest, NextApiResponse } from 'next';

const abiCoder = new ethers.AbiCoder();
export default function handler(req: NextApiRequest, res: NextApiResponse) {
  // Define the init contract bytecode
  const initBytecode = ""

  // Get the contract constructor arguments from the request query parameters
  const name = req.query.name as string;
  const symbol = req.query.symbol as string;
  const totalSupply = req.query.totalSupply as string;

  // Check that all parameters are present and valid
  if (!name || !symbol || !totalSupply) {
    res.status(400).json({ error: 'Missing or invalid parameters' });
    return;
  }

  // encoded the constructor argumenst
  const constructorArgs = abiCoder.encode(
    ["string", "string", "uint", "uint", "address", "uint"],
    [name, symbol, "18", totalSupply, "0x222Da5f13D800Ff94947C20e8714E103822Ff716", "5000000000000000"]
  );

  // Combine the bytecode and encoded constructor arguments => Creation Bytecode
  const bytecode = initBytecode + constructorArgs.slice(2);

  // Return the input as a response
  res.status(200).json({ bytecode });
}
